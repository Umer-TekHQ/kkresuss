module.exports = {
  ignorePatterns: [
    'node_modules/',
    'dist/',
    'coverage/',
    '**/InpageBridgeWeb3.js',
    '**/node_modules/react-native/**',
  ],
  env: {
    browser: true,
    node: true,
    jest: true,
  },
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaVersion: 'latest',
    sourceType: 'module',
  },
  plugins: [
    '@typescript-eslint',
    'security',
    'import',
    'react',
    'react-hooks',
    'react-native',
    'prettier',
    'sonarjs',
  ],
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:react/recommended',
  ],
  settings: {
    react: {
      pragma: 'React',
      version: 'detect',
    },
    'import/resolver': {
      node: {
        extensions: ['.js', '.jsx', '.ts', '.tsx'],
      },
    },
  },
  globals: {
    require: 'readonly',
    __DEV__: 'readonly',
    jasmine: 'readonly',
    beforeAll: 'readonly',
    afterAll: 'readonly',
    beforeEach: 'readonly',
    afterEach: 'readonly',
    test: 'readonly',
    expect: 'readonly',
    describe: 'readonly',
    jest: 'readonly',
    it: 'readonly',
    process: 'readonly',
    global: 'readonly',
    __dirname: 'readonly',
    module: 'readonly',
    document: 'readonly',
    window: 'readonly',
    localStorage: 'readonly',
    JSX: 'readonly',
    NodeJS: 'readonly',
  },
  rules: {
    ...require('eslint-plugin-sonarjs').configs.recommended.rules,
    'security/detect-object-injection': 'warn',
    'no-console': ['error', {allow: ['error']}],
    'no-alert': 'error',
    'no-duplicate-imports': 'error',
    'no-nested-ternary': 'error',
    'no-undef': 'error',
    'no-use-before-define': 'off',
    'max-params': ['error', 3],
    'max-lines-per-function': ['error', 20],
    'max-nested-callbacks': ['error', 3],
    'max-depth': ['error', 4],
    'max-lines': ['warn', {max: 200, skipBlankLines: true, skipComments: true}],

    'import/no-self-import': 'error',
    'import/default': 'error',
    'import/no-unused-modules': [1, {unusedExports: true}],
    'import/first': 'error',
    'import/no-useless-path-segments': 'error',
    'import/no-absolute-path': 'error',
    'import/no-named-as-default-member': 'error',
    'import/order': [
      'warn',
      {
        groups: [
          'builtin',
          'external',
          'internal',
          'parent',
          'sibling',
          'index',
        ],
        'newlines-between': 'always',
      },
    ],

    '@typescript-eslint/no-explicit-any': 'off',
    '@typescript-eslint/no-empty-object-type': 'off',
    '@typescript-eslint/no-unused-vars': [
      'error',
      {
        argsIgnorePattern: '^_',
        varsIgnorePattern: '^_',
      },
    ],
    '@typescript-eslint/no-shadow': 'error',
    '@typescript-eslint/prefer-as-const': 'error',

    'react/self-closing-comp': 'error',
    'react/no-danger': 'error',
    'react/no-unsafe': 'error',
    'react/prop-types': 'off',
    'react/display-name': 'off',
    'react/react-in-jsx-scope': 'off',
    'react-hooks/rules-of-hooks': 'error',
    'react/no-unused-prop-types': 'error',

    'react-native/no-raw-text': ['error', {skip: ['Text', 'AnimatedText']}],
    'react-native/no-unused-styles': 'error',
    'react-native/no-single-element-style-arrays': 'error',
    'react-native/no-color-literals': 'error',
    'react-native/no-inline-styles': 'error',
  },
};
